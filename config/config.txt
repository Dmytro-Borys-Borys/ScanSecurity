get_full_path() {
  local path="$1"
  local root_path="$2"
  local full_path

  # Check if the root path is provided
  if [[ -n "$root_path" ]]; then
    # Calculate relative path
    
    full_path="${path#$root_path/}"
    if [[ "$path" == "$root_path" ]]; then
        full_path="/"
    else
        full_path="/$full_path"
    fi
  else
    # Check if the path is ".."
    if [[ "$path" == ".." ]]; then
      # Get the parent directory of the current directory
      full_path="$(cd "$(dirname "$PWD")" && pwd)"
    else
      # Check if the path is relative or absolute
      if [[ "$path" == /* ]]; then
        # Absolute path
        full_path="$path"
      else
        # Relative path
        full_path="$(cd "$(dirname "$path")" && pwd)/$(basename "$path")"
      fi
    fi
  fi

  echo "$full_path"
}

# Carpeta de configuración
CONFIG_DIR="$(dirname "$(readlink -f "$BASH_SOURCE")")"

# Carpeta raíz del proyecto
BASE_DIR="$(get_full_path "$(dirname "$CONFIG_DIR")")"

# Archivo de ajustes de red
NETWORK_CONFIG="${CONFIG_DIR}/netconfig.txt"
# Archivo de ajustes de autenticación
AUTH_CONFIG="${CONFIG_DIR}/authconfig.txt"
# Archivo de ajustes de la empresa
BUSINESS_CONFIG="${CONFIG_DIR}/business.txt"


# ---- RUTAS -----
# Spinner
SPINNER="${BASE_DIR}/libs/Spinner/newspin.sh"
# Ruta de base datos de FreeRADIUS
RADIUS_DB_FOLDER="/opt/freeradius"
RADIUS_DB_FILENAME="freeradius.db"
RADIUS_DB=${RADIUS_DB_FOLDER}/${RADIUS_DB_FILENAME}
# Nombre de la página web NoDogSplash
NDS_PAGE="splash.html"
# Nombre del logotipo NoDogSplash (dentro de la carpeta /images)


# ===== FUNCIONES =====

# Función que establece la variable SCRIPT_DIR con la ruta del directorio del script actual.
# Parámetros:
#   - location: la ubicación del script actual.
set_scriptdir() {
    local location="$1"
    SCRIPT_DIR="$(dirname "$(readlink -f "$location")")"
}

# Intenta cargar un archivo y muestra un mensaje de error si no se encuentra.
# Parámetros:
#   - file: el archivo a cargar.
attempt_to_load() {
    local file="$1"

    # Comprueba si el archivo existe
    if [ ! -f "$file" ]; then
        exit 1 # Termina el script con un código de salida no cero
    fi

    # Continúa con el resto del script si el archivo existe
    source "$file"
}

# Crea un enlace simbólico desde una ruta de destino a una ruta de enlace especificada y cambia el propietario.
# Parámetros:
#   - target_path: la ruta de destino del enlace simbólico.
#   - link_path: la ruta del enlace simbólico a crear.
#   - owner: el propietario del enlace simbólico.
create_symbolic_link() {
    local target_path="$1"
    local link_path="$2"
    local owner="$3"

    # Borra el archivo si ya existe
    delete_if_exists "$link_path"

    # Crea un enlace simbólico
    run "sudo ln -s \"$target_path\" \"$link_path\"" "Enlazando: \"$target_path\" -> \"$link_path\""

    # Cambia el dueño del enlace
    change_owner "$owner:$owner" "$link_path"
}

change_owner() {
    local owner="$1"
    local target_path="$2"
    run "sudo chown \"$owner\" \"$target_path\"" "Cambiando dueño: \"$owner\" \"$target_path\""
}

# Elimina un archivo o directorio si existe.
# Parámetros:
#   - file: el archivo o directorio a eliminar.
delete_if_exists() {
    local file="$1"
    if sudo test -d "$file"; then
        # Deleting directory
        run "sudo rm -r \"$file\"" "Eliminando directorio: $file"
    fi
    if sudo test -e "$file"; then
        # Deleting file
        run "sudo rm \"$file\"" "Eliminando fichero: $file"
    fi
    if sudo test -L "$file" && ! sudo test -e "$file"; then
        # Deleting broken symlink
        # echo "'$file' is a broken symlink"
        run "sudo rm \"$file\"" "Eliminando enlace roto: $file"
    fi
}


# Agrega una línea al archivo /etc/rc.local justo antes de "exit 0".
# Parámetros:
#   - line: la línea a agregar.
add_to_rc_local() {
    local line="$1"
    local file="/etc/rc.local"

    # Comprueba si la línea existe en el archivo
    if grep -qF "$line" "$file"; then
        return
    else
        # Agrega la línea antes de "exit 0" en el archivo
        run "sudo sed -i \"/^exit 0/i $line\" \"$file\"" "Añadiendo \"$line\" al fichero $file"
    fi
}

# Procesa una plantilla.
# Parámetros:
#   - template_path: la ruta de la plantilla a procesar.
process_template() {
    local template_path="$1"
    local template_dir=$(dirname "$template_path")
    local template_name=$(basename "$template_path")
    local output_name="${template_name%.template}"    # Elimina la extensión '.template' del nombre de la plantilla
    local output_path="$template_dir/../$output_name" # Mueve un nivel hacia arriba y construye la ruta de salida

    local template=$(eval "cat \"$template_path\"") # Evalúa y sustituye las variables en la plantilla

    # Elimina el archivo de salida si ya existe
    delete_if_exists "$output_path"

    local processed_template=$(eval "echo \"$template\"") # Evalúa y sustituye las variables en la plantilla
    run "--quiet" "echo '$processed_template' > \"$output_path\"" "Procesando plantilla: \"$template_path\""
}

# Procesa todas las plantillas en el directorio de templates.
process_all_templates() {
    local template_dir="$SCRIPT_DIR/templates"

    # Comprueba si el directorio existe
    if [ ! -d "$template_dir" ]; then
        # echo "Directorio de plantillas no encontrado: $template_dir"
        exit 0
    fi

    # Procesa cada archivo de plantilla
    for template_file in "$template_dir"/*.template; do
        if [ -f "$template_file" ]; then
            process_template "$template_file"
        fi
    done
}

# Verifica una dependencia y la instala si es necesario.
# Parámetros:
#   - command_name: el nombre del comando a verificar.
#   - install_command: el comando para instalar la dependencia.
verify_dependency() {
    # Comprueba si el comando está instalado
    #if command -v "$1" >/dev/null 2>&1; then
    run "--quiet" "$1" "Comprobando disponibilidad: \"$1\""
    if [ $? -ne 0 ]; then 
        # Realiza la instalación utilizando el comando proporcionado
        run "$2" "Instalando $2"
    fi
}

run() {
    spinner_file="$SPINNER"

    # Check if spinner file exists and is executable
    if [ -x "$spinner_file" ]; then
        "$spinner_file" "$@"
    else
        echo "Spinner file not found or not executable."
    fi
}






change_directory() {
    full_path=$(get_full_path "$(get_full_path "$1")" "$BASE_DIR") #  
    if run "cd $1" "Cambiando al directorio: $full_path"; then
        cd $1
        return 0
    else 
        return $?
    fi
}

test_execute() {
    local script="$(get_full_path "$1")"
    
    if [[ -x "$script" ]]; then
        return 0
    else
        return 1
    fi
}

execute() {
    local executable="$(get_full_path "$1")"

    echo "$(test_execute "$executable")"
    
    if run "--quiet" "file \"$executable\" | grep \"executable\"" "Ejecutando: \"$executable\"" ; then
        bash "$executable"
    fi
}

verify_pip_dependency() {
    run "--quiet" "pip show $1 -q" "Comprobando disponibilidad: \"$1\""
    if [ $? -ne 0 ]; then 
        # Realiza la instalación utilizando el comando proporcionado
        run "pip install $1" "Instalando $1 con pip"
    fi
}

change_mode() {
    local mode="$1"
    local target="$2"
    run "sudo chmod $mode $target" "Cambiando permisos: $target"
}